// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';
import '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol';
import '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';
import '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';
import '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';
import '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';

import './interfaces/IBEP20.sol';
import './interfaces/IVersionedContract.sol';

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract BaseERC721 is
	Initializable,
	ContextUpgradeable,
	AccessControlEnumerableUpgradeable,
	ReentrancyGuardUpgradeable,
	ERC721EnumerableUpgradeable,
	ERC721PausableUpgradeable,
	IVersionedContract
{
	using CountersUpgradeable for CountersUpgradeable.Counter;

	/*
   	=======================================================================
   	======================== Private Variables ============================
   	=======================================================================
 	*/
	bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');
	bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');
	bytes32 public constant OPERATOR_ROLE = keccak256('OPERATOR_ROLE');

	CountersUpgradeable.Counter private _tokenIdTracker;

	string private _baseTokenURI;

	/*
   	=======================================================================
   	======================== Modifiers ====================================
 	=======================================================================
 	*/
	modifier onlyOperator() {
		require(hasRole(OPERATOR_ROLE, _msgSender()), 'BaseERC721: ONLY_OPERATOR_CAN_CALL');
		_;
	}

	/*
   	=======================================================================
   	======================== Initializer ==================================
   	=======================================================================
	*/
	function initialize_BaseERC721(
		string memory _name,
		string memory _symbol,
		string memory baseTokenURI
	) internal virtual initializer {
		__BaseERC721_init(_name, _symbol, baseTokenURI);
	}

	/**
	 * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
	 * account that deploys the contract.
	 *
	 * Token URIs will be autogenerated based on `baseURI` and their token IDs.
	 * See {ERC721-tokenURI}.
	 */
	function __BaseERC721_init(
		string memory _name,
		string memory _symbol,
		string memory baseTokenURI
	) internal initializer {
		__Context_init_unchained();
		__ERC165_init_unchained();
		__AccessControl_init_unchained();
		__AccessControlEnumerable_init_unchained();
		__ERC721_init_unchained(_name, _symbol);
		__ERC721Enumerable_init_unchained();
		__Pausable_init_unchained();
		__ERC721Pausable_init_unchained();
		__BaseERC721_init_unchained(baseTokenURI);
	}

	function __BaseERC721_init_unchained(string memory baseTokenURI) internal initializer {
		_baseTokenURI = baseTokenURI;

		_setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

		_setupRole(MINTER_ROLE, _msgSender());
		_setupRole(PAUSER_ROLE, _msgSender());
	}

	function baseURI() external view virtual returns (string memory) {
		return _baseTokenURI;
	}

	function tokenURI(uint256 _tokenId) public view override returns (string memory) {
		return string(abi.encodePacked(_baseTokenURI, StringsUpgradeable.toString(_tokenId)));
	}

	/**
	 * @dev Creates a new token for `to`. Its token ID will be automatically
	 * assigned (and available on the emitted {IERC721-Transfer} event), and the token
	 * URI autogenerated based on the base URI passed at construction.
	 *
	 * See {ERC721-_mint}.
	 *
	 * Requirements:
	 *
	 * - the caller must have the `MINTER_ROLE`.
	 */
	function mint(address to) internal virtual returns (uint256 tokenId) {
		_tokenIdTracker.increment();
		tokenId = _tokenIdTracker.current();
		// We cannot just use balanceOf to create the new tokenId because tokens
		// can be burned (destroyed), so we need a separate counter.
		_mint(to, tokenId);
	}

	/**
	 * @notice This method allows operator to update base uri
	 */
	function updateBaseUri(string memory _baseUri) external virtual onlyOperator {
		_baseTokenURI = _baseUri;
	}

	/**
	 * @notice This method returns the current NFT token Id
	 */
	function getCurrentTokenId() public view virtual returns (uint256) {
		return _tokenIdTracker.current();
	}

	/**
	 * @dev Pauses all token transfers.
	 *
	 * See {ERC721Pausable} and {Pausable-_pause}.
	 *
	 * Requirements:
	 *
	 * - the caller must have the `PAUSER_ROLE`.
	 */
	function pause() external virtual {
		require(hasRole(PAUSER_ROLE, _msgSender()), 'BaseERC721: NEED_PAUSER_ROLE');
		_pause();
	}

	/**
	 * @dev Unpauses all token transfers.
	 *
	 * See {ERC721Pausable} and {Pausable-_unpause}.
	 *
	 * Requirements:
	 *
	 * - the caller must have the `PAUSER_ROLE`.
	 */
	function unpause() external virtual {
		require(hasRole(PAUSER_ROLE, _msgSender()), 'BaseERC721: NEED_PAUSER_ROLE');
		_unpause();
	}

	/**
	 * @notice Returns the storage, major, minor, and patch version of the contract.
	 * @return The storage, major, minor, and patch version of the contract.
	 */
	function getVersionNumber()
		external
		pure
		virtual
		override
		returns (
			uint256,
			uint256,
			uint256
		)
	{
		return (1, 0, 0);
	}

	function _beforeTokenTransfer(
		address from,
		address to,
		uint256 tokenId
	) internal virtual override(ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {
		super._beforeTokenTransfer(from, to, tokenId);
	}

	/**
	 * @dev See {IERC165-supportsInterface}.
	 */
	function supportsInterface(bytes4 interfaceId)
		public
		view
		virtual
		override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable)
		returns (bool)
	{
		return super.supportsInterface(interfaceId);
	}
}
