{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xB5802622Df3c336bbCb25332a9E25fe6562C2D20",
    "txHash": "0x3093174a01577a5c9f88270cb1bb7c0075b282e1195d9aa2063db1f2a7dda0ca"
  },
  "proxies": [
    {
      "address": "0xd3bb831Ec894741467CC670B922a84554600b527",
      "txHash": "0x7f7b580075e8e19de3365427624d722217f210d46e133ee72ade547589972e7d",
      "kind": "transparent"
    },
    {
      "address": "0xCA12a05d5d9fd97B9fDcF3447Ea2C99E6Ffc248c",
      "txHash": "0x1a6f218313efeef45838fa9c4b9bf55438a88b2428c1c61b3379335306162ba4",
      "kind": "transparent"
    },
    {
      "address": "0xd0f5B1f0318718f1D030a76ae03D63ad19ED9020",
      "txHash": "0x1f09c53c289e30de0e0b2107dc2c87d9843e76ffb34c2e4672e3462903360bcd",
      "kind": "transparent"
    },
    {
      "address": "0x258b6D37542abf3F3630251Cd3d4AEeA4A78b434",
      "txHash": "0xecf3a13e6d46a544ae7572118979536658e803d24c790217e9fa9f3827ffab69",
      "kind": "transparent"
    },
    {
      "address": "0xF4d30600D07ed950B6C510D8527CEDb07CED592F",
      "txHash": "0xd21751f143f2d300f18e7c332af9b71223d50049224e0c8f0fd05156f9c3e8e5",
      "kind": "transparent"
    },
    {
      "address": "0xc9Fdb9AE598D13cc8e5E58d1fC2107F6553D7729",
      "txHash": "0x15d7be34590ee37407bec1b0cb793e9306f13865382f676e3a30434fb9a2eec2",
      "kind": "transparent"
    },
    {
      "address": "0xc048D451DbBB2bCf04f565128b712D064C2b1176",
      "txHash": "0xf44d1a7ebceae76c2b6dd129a2ffc658bc2f096a5e02f5b56056a168baf8525d",
      "kind": "transparent"
    },
    {
      "address": "0x3B4042170C7392E7bE23ab4e044AED9992dC00c6",
      "txHash": "0x624804f5df3219e662199b51875f39b0fe80ed8dcb08b0dc0fd88294e1ca3a06",
      "kind": "transparent"
    },
    {
      "address": "0xdab9a33CC1F65Ae314e15791c02e4F3d5e7622dc",
      "txHash": "0xdaf1c1a20c6f01a0849e24876da856d2d23e270fbd2a37deeef7de3e0ea85ec3",
      "kind": "transparent"
    },
    {
      "address": "0x5E39D2cB650d7Ff7d9A80b3b2DEFCf5a8788d004",
      "txHash": "0xe61ad32bd671b9727f3b8ad4ef4080e012e7d2d815adf0600f21568327cef831",
      "kind": "transparent"
    },
    {
      "address": "0xB60e7E7Bb34aE2B51338Da11f266Bb065d1f00B1",
      "txHash": "0x2cce7c7a60ff80f5e001391adb3022abbaae36ee20853b9caa28ae6699c57589",
      "kind": "transparent"
    },
    {
      "address": "0xdB8c6B7F1F2dc5822D08a426EC3a544eaF79c1d7",
      "txHash": "0xa7a4e06a6e5b56da1a86aaf72c3069144813f71b4f3cfc119d0f75b791ed2c89",
      "kind": "transparent"
    },
    {
      "address": "0xFb229e15B691245e5A2D8Fa8EB65f51cd8f28f5d",
      "txHash": "0x7011561bbafc4b34782e2adeeedc79c90578833aff15542ea7bb482f939a0c40",
      "kind": "transparent"
    },
    {
      "address": "0xC79cc8B995C5763f4070cD2D3a155FD0367b2146",
      "txHash": "0x894e7b8abab0e95e30c51a1f94636e7c038ff81d010f6d1dfcd407848b307273",
      "kind": "transparent"
    },
    {
      "address": "0x5eF794e97F9E5b8913d7D1708652da5b59e41c2A",
      "txHash": "0x030cb444496100229f3dce116179152837566bb7fbf2076f5931fcd3df1b660f",
      "kind": "transparent"
    },
    {
      "address": "0x76577B8803C20C479b6F322273df1FB85c0Ac4b2",
      "txHash": "0x25677f4e3a8fddc8690c76349093bd11633654134a9c30ad7bef737cb9df4fa3",
      "kind": "transparent"
    },
    {
      "address": "0x5f49188c46D6284A83364D8550b692C1780ddBCb",
      "txHash": "0x1039f46cd9ad1cecf352a718458e37296bed559cc22a8b88b450cbfe1de8758f",
      "kind": "transparent"
    },
    {
      "address": "0x56E8B33A57AA40878aA7Bb91a11d2E1aCc0B5aF5",
      "txHash": "0xeaab12164837fc9c3467cd2f63b83a0f51cdfba1f36c5e79105980e8e68fe318",
      "kind": "transparent"
    },
    {
      "address": "0x86d954eC4325DC08c82102332D413c3F5AEa98Be",
      "txHash": "0x8442aa9d343164b616d5aa4c961de15223446b047f4f8951b47c9563dc747fa4",
      "kind": "transparent"
    },
    {
      "address": "0x58940E78Bf638428d6916A505a9eeF28fcFa4765",
      "txHash": "0xd1430d89f5a4c4d548c6770da4e516f20b29979b72e82bf65d38bf6dfd969445",
      "kind": "transparent"
    },
    {
      "address": "0xbED1EA5dD18F4E27809D7B91D8460E9818128d7C",
      "txHash": "0x00b1b98cc7963a89edbdefad96219f6907b3f7700d5280034fd016ece857d5f6",
      "kind": "transparent"
    },
    {
      "address": "0x0Bd8d977cFAE1F6d3591AB2C8595f65F442D1884",
      "txHash": "0xdbe0370337ef7a1e45decc1948a845c413620c60f585c283222baed3dfb09416",
      "kind": "transparent"
    },
    {
      "address": "0x1b7aa71aCbe96e65B5Ed9BeA45cDb608629EbBcB",
      "txHash": "0x0108ecf0efb18294c43ae58afa9a56c55617e72bbc72c51d544c8038c0d7bbcd",
      "kind": "transparent"
    },
    {
      "address": "0x967c01B0b44CB41a547C2A853729C3cA26C75Aa9",
      "txHash": "0xaff950ad7b9b9c5080c8031d32236ff112e5f1f11727ca43423ce5e9ae82231d",
      "kind": "transparent"
    },
    {
      "address": "0x09EA941B4fe229CA3D10565f72F26DF8602EE379",
      "txHash": "0x73cf1301dbccee95c1eb598f9b547fd809c65c4b5d09e1970756bed54dc48d96",
      "kind": "transparent"
    },
    {
      "address": "0x268011F40E61D17C3836e1bA08e7d49B89BbF3FF",
      "txHash": "0xa77dc1b65c19721fb42a45ab611eb45ceccebf0e3236144ef72af4e41af12db1",
      "kind": "transparent"
    },
    {
      "address": "0x4B75e636e323cA4Ee0eabf9fE6dedade650C704B",
      "txHash": "0xe600ee74c32f012f0f32e2192b6f43af48937de2b4d9c343783bf85d772f539f",
      "kind": "transparent"
    },
    {
      "address": "0x9fC8a8a8583f3A42A60f59cbEa77796b5DCEf964",
      "txHash": "0x1304fc05416cfdc903039a7ae25375f5b76d22db9a649596287c820b0c925762",
      "kind": "transparent"
    },
    {
      "address": "0x1C16aBd9a69113f0E812bCe929f00e564810BC73",
      "txHash": "0xd6a02180e22ec47e413c4eb79398893d02f54a739b529ab3e5633a8a9f93d97a",
      "kind": "transparent"
    },
    {
      "address": "0x545C270F607f16CefFb4E0B6244DfF6E22fB48d9",
      "txHash": "0x3c015a8405d6b714dd0a7e1d3411dc6a4103e0bb988256c73dbc75278be76fc1",
      "kind": "transparent"
    },
    {
      "address": "0xF2fa2d97BF415b8c3b34e4a37aBC1Bbf620d20c7",
      "txHash": "0x1ac603eca11f381756e96f97bb6b56ef9b3e5213c9d7c0e4c290c499702bcf43",
      "kind": "transparent"
    },
    {
      "address": "0x5176569Dc12A5d416017a53184B1FC45eb54A402",
      "txHash": "0x628df7bc5c3cba1b21afe95c979c493ad90926c84dffb27fe4c3d8e4dc17e6b4",
      "kind": "transparent"
    },
    {
      "address": "0x2cAf0D71F8Eb5eE617129872E7cD358186714d98",
      "txHash": "0x098249c10f004be5b4efad426d1d31e28e4e985814e461b064bb2183a22d364a",
      "kind": "transparent"
    },
    {
      "address": "0x60F4c1894A4b165E5c6A7cDaEC8A1D50BD5F649D",
      "txHash": "0xf8fd3b75a421890c66d2420f05465ea74db30a8ff40afe60bc51d4861c03fde3",
      "kind": "transparent"
    },
    {
      "address": "0x8836000435dCD24946c68D755954c16EcC70c70C",
      "txHash": "0x32f7a803ecdab4e5cf0f0a829de8f99d2654a897d8b8467285f7d2b0c4a896bc",
      "kind": "transparent"
    },
    {
      "address": "0x0Da76550FA88a8BeB505DfD2f613bB7060C44e2d",
      "txHash": "0x900b97fb3eac4b9131be55a5cad701266455bd565790bb6ebb5ebb8ed9bd6301",
      "kind": "transparent"
    },
    {
      "address": "0x09f6b2C17c60D00c299E20164c86FCC1C67fBA81",
      "txHash": "0x7f63283c246434581492dfa304ba5aa43bed95a39d07acebd007e9559d282f2f",
      "kind": "transparent"
    },
    {
      "address": "0x39b256a268Db665d512C5B916b72cAb703861BF2",
      "txHash": "0xcba56f97a3ee74b8204f2fdf94a5231230950aa5607ead0c6c267b782771c033",
      "kind": "transparent"
    },
    {
      "address": "0x7d6B6BE180e612fbe79E4FdeCA6C45CE1CF2Fece",
      "txHash": "0x6d8cba05d02ba20fa97b86709d7404a532fcdd1008d934e8c9a114fec33a9cf2",
      "kind": "transparent"
    },
    {
      "address": "0xCf88C6D762efd0D7C885506e216982Af54271E0A",
      "txHash": "0xefde2a97a8faeef437982e70bf2375eda4ecc01218ecc3ec2debb39c5a743bda",
      "kind": "transparent"
    },
    {
      "address": "0xC6FC79E452cA038df4d2aa0BD4c6a45aA4ed840C",
      "txHash": "0x4403d94c390cbb762a3c9a6483d7fd6301765ba19b36b72bc11af3083a91b5e9",
      "kind": "transparent"
    },
    {
      "address": "0x6223f1a21036Ea50BE0EB53815F6B8B9Da1F797A",
      "txHash": "0x65f54363338f805f6f21d48da6768c4f909b200b712959192aa41ea4ff441698",
      "kind": "transparent"
    },
    {
      "address": "0xA561161B9E36Ef5A7DC04a50436a1bbe6119f162",
      "txHash": "0x5256991c9344550f14d4ddca431bbcf83541ae1a572bd572055311aa26bc4fee",
      "kind": "transparent"
    },
    {
      "address": "0x9729122D63758fF0956Dc44ed4Ad4574CCf4e9ad",
      "txHash": "0x586c2dcdb78bafacc279041fd360efed7a9e95b6a0dbebda5519435d0c942b15",
      "kind": "transparent"
    },
    {
      "address": "0x2Bef1Aa1262953B425EA6E1c63C60082Ce4766F7",
      "txHash": "0x06b2685cd5f1dca0321339ab7b592fd9f658a67b1ad02587b4aa1e3705112bf7",
      "kind": "transparent"
    },
    {
      "address": "0x857028d5508F576D81C8D7749FDF6B368De78B08",
      "txHash": "0x58ea6f640f4b7f7bc9b8b54a210f4b63073fe323ebd15db50bafa5cf68ac8a30",
      "kind": "transparent"
    },
    {
      "address": "0xf42853238F07613A74bEC6d643827eEf65A8b64B",
      "txHash": "0x50d5b4ffaa61389c434c222ccee031507ebc1dbb9ebacc415212868309d8e442",
      "kind": "transparent"
    },
    {
      "address": "0x582ee6ad7dFDF3b6B0EDb8fEEbDFc87FA5e0Ad01",
      "txHash": "0x24825ad0b9252558dcf8ace40acde21b4411b1ea744169a839278296aafa30c0",
      "kind": "transparent"
    },
    {
      "address": "0xfb49B3bf669b8A2A9cebFa9d0d461fec135501d7",
      "txHash": "0xdd6c40e33fef6d74e3ed7036beb23c9af74e651c9160d3027b156caf35cec53b",
      "kind": "transparent"
    },
    {
      "address": "0x439de641f1Cc801084C5D42Da2417c8df8E9006B",
      "txHash": "0x4e19c7ced0265e3fd42173bd15534716064cdafa67ec7e5d551f618666f79bcd",
      "kind": "transparent"
    },
    {
      "address": "0xbB6792BF97D10C8473FC99055576e9ccF9a67544",
      "kind": "transparent"
    },
    {
      "address": "0x71e675AF27419a2D6BfE5c5E9aFaBe62dBE03989",
      "kind": "transparent"
    }
  ],
  "impls": {
    "91a341a55d5e4aa0bddde079959934c01ad1957de471a3dc2d450dc1f1244ca3": {
      "address": "0x1F43f925D50eb92DC3f270421a0C631c119cCb7E",
      "txHash": "0xc76cc8ef22dc9891c85b191784bdbd262d04688fa37ed0416d021b27befab81a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)8057_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)12717_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:25"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:94"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenCounter",
            "type": "t_struct(Counter)13846_storage",
            "src": "BaseERC1155.sol:50"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenTotalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "BaseERC1155.sol:59"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "BaseERC1155.sol:288"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyReceiver",
            "type": "t_address",
            "src": "BaseERC1155WithRoyalties.sol:31"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyFee",
            "type": "t_uint8",
            "src": "BaseERC1155WithRoyalties.sol:33"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "BaseERC1155WithRoyalties.sol:130"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedAddresses",
            "type": "t_array(t_address)dyn_storage",
            "src": "IngredientsNFT.sol:36"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedFromAddresses",
            "type": "t_array(t_address)dyn_storage",
            "src": "IngredientsNFT.sol:37"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ingredients",
            "type": "t_mapping(t_uint256,t_struct(Ingredient)2440_storage)",
            "src": "IngredientsNFT.sol:40"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defs",
            "type": "t_mapping(t_uint256,t_struct(Defs)2428_storage)",
            "src": "IngredientsNFT.sol:43"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defsCounter",
            "type": "t_struct(Counter)13846_storage",
            "src": "IngredientsNFT.sol:50"
          },
          {
            "contract": "IngredientsNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "IngredientsNFT.sol:317"
          }
        ],
        "types": {
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(Ingredient)2440_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Ingredient)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Ingredient)2440_storage": {
            "label": "struct IngredientsNFT.Ingredient",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "nutritionsHash",
                "type": "t_uint256"
              },
              {
                "label": "defIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(Defs)2428_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Defs)"
          },
          "t_struct(Defs)2428_storage": {
            "label": "struct IngredientsNFT.Defs",
            "members": [
              {
                "label": "ingredientId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_struct(Counter)13846_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)12717_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)12717_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)12446_storage"
              }
            ]
          },
          "t_struct(Set)12446_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)8057_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)8057_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "575457c47142c237389f57fc5584c01769938e1b21028a7b271445031766d9e7": {
      "address": "0x7923485475757127f0E2Eb417AD2C299012A5E5D",
      "txHash": "0x0ce3997f6a896eabc74b58edda618ca56e17e5820a3724bd460dad06967ddffd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)8057_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "Pantry",
            "label": "dish",
            "type": "t_mapping(t_uint256,t_struct(Dish)3917_storage)",
            "src": "Pantry.sol:36"
          },
          {
            "contract": "Pantry",
            "label": "baseIngredient",
            "type": "t_mapping(t_uint256,t_struct(BaseIngredient)3902_storage)",
            "src": "Pantry.sol:39"
          },
          {
            "contract": "Pantry",
            "label": "baseVariation",
            "type": "t_mapping(t_uint256,t_struct(BaseVariation)3909_storage)",
            "src": "Pantry.sol:42"
          },
          {
            "contract": "Pantry",
            "label": "baseIngredientCounter",
            "type": "t_struct(Counter)13846_storage",
            "src": "Pantry.sol:49"
          },
          {
            "contract": "Pantry",
            "label": "dishCounter",
            "type": "t_struct(Counter)13846_storage",
            "src": "Pantry.sol:50"
          },
          {
            "contract": "Pantry",
            "label": "baseVariationCounter",
            "type": "t_struct(Counter)13846_storage",
            "src": "Pantry.sol:51"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Dish)3917_storage)": {
            "label": "mapping(uint256 => struct Pantry.Dish)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Dish)3917_storage": {
            "label": "struct Pantry.Dish",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseIngredientIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(BaseIngredient)3902_storage)": {
            "label": "mapping(uint256 => struct Pantry.BaseIngredient)"
          },
          "t_struct(BaseIngredient)3902_storage": {
            "label": "struct Pantry.BaseIngredient",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "variationIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(BaseVariation)3909_storage)": {
            "label": "mapping(uint256 => struct Pantry.BaseVariation)"
          },
          "t_struct(BaseVariation)3909_storage": {
            "label": "struct Pantry.BaseVariation",
            "members": [
              {
                "label": "baseId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_struct(Counter)13846_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)8057_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)8057_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ea60b0069ff124e45d8fe714365379acbe12a7526cff3b41533a6b3986a9bbd5": {
      "address": "0x7BEdBDA917b411220C3c8292cCF92664EE9c8a06",
      "txHash": "0x429dfbcd69a70e984418317d14599d782938fd6bdf4e6b924da1a414382928bc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)8057_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)12717_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:34"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:42"
          },
          {
            "contract": "BaseERC721",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)12106_storage",
            "src": "BaseERC721.sol:42"
          },
          {
            "contract": "BaseERC721",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "BaseERC721.sol:43"
          },
          {
            "contract": "BaseERC721",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "BaseERC721.sol:208"
          },
          {
            "contract": "DishesNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "DishesNFT.sol:42"
          },
          {
            "contract": "DishesNFT",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)4586",
            "src": "DishesNFT.sol:44"
          },
          {
            "contract": "DishesNFT",
            "label": "pantry",
            "type": "t_contract(IPantry)4696",
            "src": "DishesNFT.sol:45"
          },
          {
            "contract": "DishesNFT",
            "label": "exceptedAddresses",
            "type": "t_array(t_address)dyn_storage",
            "src": "DishesNFT.sol:47"
          },
          {
            "contract": "DishesNFT",
            "label": "dish",
            "type": "t_mapping(t_uint256,t_struct(Dish)913_storage)",
            "src": "DishesNFT.sol:50"
          },
          {
            "contract": "DishesNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "DishesNFT.sol:391"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)4586": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IPantry)4696": {
            "label": "contract IPantry"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(Dish)913_storage)": {
            "label": "mapping(uint256 => struct DishesNFT.Dish)"
          },
          "t_struct(Dish)913_storage": {
            "label": "struct DishesNFT.Dish",
            "members": [
              {
                "label": "dishOwner",
                "type": "t_address"
              },
              {
                "label": "cooked",
                "type": "t_bool"
              },
              {
                "label": "dishId",
                "type": "t_uint256"
              },
              {
                "label": "totalIngredients",
                "type": "t_uint256"
              },
              {
                "label": "variationIdHash",
                "type": "t_uint256"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseVariationHash",
                "type": "t_uint256"
              },
              {
                "label": "flameType",
                "type": "t_uint256"
              },
              {
                "label": "creationTime",
                "type": "t_uint256"
              },
              {
                "label": "completionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_struct(Counter)12106_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)12717_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)12717_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)12446_storage"
              }
            ]
          },
          "t_struct(Set)12446_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)8057_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)8057_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "aab4b946ffd019b76e18e9c5e2c7c83cb587f9feb7c932302b0e004417990a9d": {
      "address": "0x896a45e0F3477017Fa589A35A4a096478C33f563",
      "txHash": "0xe9c95d1a1757a024603085f2d6d5ca5acdea5a51c378c9cea5751be6cb773ad8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)8057_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "Oven",
            "label": "flamesCounter",
            "type": "t_struct(Counter)12106_storage",
            "src": "Oven.sol:39"
          },
          {
            "contract": "Oven",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)4586",
            "src": "Oven.sol:46"
          },
          {
            "contract": "Oven",
            "label": "dishesNft",
            "type": "t_contract(IDishesNFT)4505",
            "src": "Oven.sol:47"
          },
          {
            "contract": "Oven",
            "label": "lacToken",
            "type": "t_contract(IBEP20)4434",
            "src": "Oven.sol:48"
          },
          {
            "contract": "Oven",
            "label": "uncookedDishIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "Oven.sol:51"
          },
          {
            "contract": "Oven",
            "label": "flames",
            "type": "t_mapping(t_uint256,t_struct(FlameDetail)3139_storage)",
            "src": "Oven.sol:54"
          }
        ],
        "types": {
          "t_struct(Counter)12106_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)4586": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IDishesNFT)4505": {
            "label": "contract IDishesNFT"
          },
          "t_contract(IBEP20)4434": {
            "label": "contract IBEP20"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(FlameDetail)3139_storage)": {
            "label": "mapping(uint256 => struct Oven.FlameDetail)"
          },
          "t_struct(FlameDetail)3139_storage": {
            "label": "struct Oven.FlameDetail",
            "members": [
              {
                "label": "flameType",
                "type": "t_string_storage"
              },
              {
                "label": "preparationDuration",
                "type": "t_uint256"
              },
              {
                "label": "lacCharge",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)8057_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)8057_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e11f4e8dea19452275b30389044c792340ee5c0f208b244f5198f9051df98952": {
      "address": "0x98b553298f75FE1F1eE508c3aD1A4a54810dEade",
      "txHash": "0x4e5565c3a93022fc7357d670b3ee48b5a332b1f95a6986f819ed08c13a438c99",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)8133_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "Marketplace",
            "label": "saleIdCounter",
            "type": "t_struct(Counter)13922_storage",
            "src": "marketplace/Marketplace.sol:69"
          },
          {
            "contract": "Marketplace",
            "label": "auctionIdCounter",
            "type": "t_struct(Counter)13922_storage",
            "src": "marketplace/Marketplace.sol:70"
          },
          {
            "contract": "Marketplace",
            "label": "bidIdCounter",
            "type": "t_struct(Counter)13922_storage",
            "src": "marketplace/Marketplace.sol:71"
          },
          {
            "contract": "Marketplace",
            "label": "nftContract",
            "type": "t_contract(IIngredientNFT)4597",
            "src": "marketplace/Marketplace.sol:80"
          },
          {
            "contract": "Marketplace",
            "label": "minDuration",
            "type": "t_uint256",
            "src": "marketplace/Marketplace.sol:82"
          },
          {
            "contract": "Marketplace",
            "label": "sale",
            "type": "t_mapping(t_uint256,t_struct(SaleInfo)5210_storage)",
            "src": "marketplace/Marketplace.sol:85"
          },
          {
            "contract": "Marketplace",
            "label": "userSaleIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:88"
          },
          {
            "contract": "Marketplace",
            "label": "auction",
            "type": "t_mapping(t_uint256,t_struct(AuctionInfo)5234_storage)",
            "src": "marketplace/Marketplace.sol:91"
          },
          {
            "contract": "Marketplace",
            "label": "userAuctionIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:94"
          },
          {
            "contract": "Marketplace",
            "label": "bid",
            "type": "t_mapping(t_uint256,t_struct(Bid)5241_storage)",
            "src": "marketplace/Marketplace.sol:97"
          },
          {
            "contract": "Marketplace",
            "label": "userBidIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:100"
          },
          {
            "contract": "Marketplace",
            "label": "supportedTokens",
            "type": "t_array(t_address)dyn_storage",
            "src": "marketplace/Marketplace.sol:103"
          }
        ],
        "types": {
          "t_struct(Counter)13922_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)4597": {
            "label": "contract IIngredientNFT"
          },
          "t_mapping(t_uint256,t_struct(SaleInfo)5210_storage)": {
            "label": "mapping(uint256 => struct Marketplace.SaleInfo)"
          },
          "t_struct(SaleInfo)5210_storage": {
            "label": "struct Marketplace.SaleInfo",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "buyer",
                "type": "t_address"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "totalCopies",
                "type": "t_uint256"
              },
              {
                "label": "remainingCopies",
                "type": "t_uint256"
              },
              {
                "label": "sellingPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "sellTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(AuctionInfo)5234_storage)": {
            "label": "mapping(uint256 => struct Marketplace.AuctionInfo)"
          },
          "t_struct(AuctionInfo)5234_storage": {
            "label": "struct Marketplace.AuctionInfo",
            "members": [
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "sellerAddress",
                "type": "t_address"
              },
              {
                "label": "initialPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint256"
              },
              {
                "label": "winningBidId",
                "type": "t_uint256"
              },
              {
                "label": "bidIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "buyTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Bid)5241_storage)": {
            "label": "mapping(uint256 => struct Marketplace.Bid)"
          },
          "t_struct(Bid)5241_storage": {
            "label": "struct Marketplace.Bid",
            "members": [
              {
                "label": "auctionId",
                "type": "t_uint256"
              },
              {
                "label": "bidderAddress",
                "type": "t_address"
              },
              {
                "label": "bidAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)8133_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)8133_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "0de5e11b00a8ec82b8740f79a5929857996252081a101677f27ff322408f3583": {
      "address": "0x8b1B6cf5D52b7d924Cd4844093bDD25024d79aa3",
      "txHash": "0xe6351652f2ffa8237573d4cdc1e4cdcd70bdb5289101efefab0606b47805f6f8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)8133_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "Marketplace",
            "label": "saleIdCounter",
            "type": "t_struct(Counter)13922_storage",
            "src": "marketplace/Marketplace.sol:69"
          },
          {
            "contract": "Marketplace",
            "label": "auctionIdCounter",
            "type": "t_struct(Counter)13922_storage",
            "src": "marketplace/Marketplace.sol:70"
          },
          {
            "contract": "Marketplace",
            "label": "bidIdCounter",
            "type": "t_struct(Counter)13922_storage",
            "src": "marketplace/Marketplace.sol:71"
          },
          {
            "contract": "Marketplace",
            "label": "nftContract",
            "type": "t_contract(IIngredientNFT)4597",
            "src": "marketplace/Marketplace.sol:80"
          },
          {
            "contract": "Marketplace",
            "label": "minDuration",
            "type": "t_uint256",
            "src": "marketplace/Marketplace.sol:82"
          },
          {
            "contract": "Marketplace",
            "label": "sale",
            "type": "t_mapping(t_uint256,t_struct(SaleInfo)5210_storage)",
            "src": "marketplace/Marketplace.sol:85"
          },
          {
            "contract": "Marketplace",
            "label": "userSaleIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:88"
          },
          {
            "contract": "Marketplace",
            "label": "auction",
            "type": "t_mapping(t_uint256,t_struct(AuctionInfo)5234_storage)",
            "src": "marketplace/Marketplace.sol:91"
          },
          {
            "contract": "Marketplace",
            "label": "userAuctionIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:94"
          },
          {
            "contract": "Marketplace",
            "label": "bid",
            "type": "t_mapping(t_uint256,t_struct(Bid)5241_storage)",
            "src": "marketplace/Marketplace.sol:97"
          },
          {
            "contract": "Marketplace",
            "label": "userBidIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:100"
          },
          {
            "contract": "Marketplace",
            "label": "supportedTokens",
            "type": "t_array(t_address)dyn_storage",
            "src": "marketplace/Marketplace.sol:103"
          }
        ],
        "types": {
          "t_struct(Counter)13922_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)4597": {
            "label": "contract IIngredientNFT"
          },
          "t_mapping(t_uint256,t_struct(SaleInfo)5210_storage)": {
            "label": "mapping(uint256 => struct Marketplace.SaleInfo)"
          },
          "t_struct(SaleInfo)5210_storage": {
            "label": "struct Marketplace.SaleInfo",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "buyer",
                "type": "t_address"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "totalCopies",
                "type": "t_uint256"
              },
              {
                "label": "remainingCopies",
                "type": "t_uint256"
              },
              {
                "label": "sellingPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "sellTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(AuctionInfo)5234_storage)": {
            "label": "mapping(uint256 => struct Marketplace.AuctionInfo)"
          },
          "t_struct(AuctionInfo)5234_storage": {
            "label": "struct Marketplace.AuctionInfo",
            "members": [
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "sellerAddress",
                "type": "t_address"
              },
              {
                "label": "initialPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint256"
              },
              {
                "label": "winningBidId",
                "type": "t_uint256"
              },
              {
                "label": "bidIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "buyTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Bid)5241_storage)": {
            "label": "mapping(uint256 => struct Marketplace.Bid)"
          },
          "t_struct(Bid)5241_storage": {
            "label": "struct Marketplace.Bid",
            "members": [
              {
                "label": "auctionId",
                "type": "t_uint256"
              },
              {
                "label": "bidderAddress",
                "type": "t_address"
              },
              {
                "label": "bidAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)8133_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)8133_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "8ddcd8e9a8ce5ae606e7377b13ec80c318aa14966ee1b27605b8a6b1b0987cef": {
      "address": "0xf6754a2Dc17E5280C5172Aa38a24dB1b2eB217C9",
      "txHash": "0x5032679ebcd8a43003cfb7160c7a3946f2697bf70c1de33b0aaf4b84a3b22b19",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)10620_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)15280_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:25"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:94"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenCounter",
            "type": "t_struct(Counter)16409_storage",
            "src": "BaseERC1155.sol:50"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenTotalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "BaseERC1155.sol:59"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "BaseERC1155.sol:297"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyReceiver",
            "type": "t_address",
            "src": "BaseERC1155WithRoyalties.sol:31"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyFee",
            "type": "t_uint8",
            "src": "BaseERC1155WithRoyalties.sol:33"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "BaseERC1155WithRoyalties.sol:130"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedAddresses",
            "type": "t_array(t_address)dyn_storage",
            "src": "IngredientsNFT.sol:36"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedFromAddresses",
            "type": "t_array(t_address)dyn_storage",
            "src": "IngredientsNFT.sol:37"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ingredients",
            "type": "t_mapping(t_uint256,t_struct(Ingredient)1874_storage)",
            "src": "IngredientsNFT.sol:40"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ipfsHash",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "IngredientsNFT.sol:43"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defs",
            "type": "t_mapping(t_uint256,t_struct(Defs)1862_storage)",
            "src": "IngredientsNFT.sol:46"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defsCounter",
            "type": "t_struct(Counter)16409_storage",
            "src": "IngredientsNFT.sol:53"
          },
          {
            "contract": "IngredientsNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "IngredientsNFT.sol:382"
          }
        ],
        "types": {
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(Ingredient)1874_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Ingredient)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Ingredient)1874_storage": {
            "label": "struct IngredientsNFT.Ingredient",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "nutritionsHash",
                "type": "t_uint256"
              },
              {
                "label": "defIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_struct(Defs)1862_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Defs)"
          },
          "t_struct(Defs)1862_storage": {
            "label": "struct IngredientsNFT.Defs",
            "members": [
              {
                "label": "ingredientId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_struct(Counter)16409_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)15280_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)15280_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)15009_storage"
              }
            ]
          },
          "t_struct(Set)15009_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)10620_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)10620_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "284868de011fa2171ad174849b2f591de38f2c8c2eab09f4140086222037c953": {
      "address": "0x22f7c1e413cBCFB6348F506418Bb29E1224F515a",
      "txHash": "0xf8e5b94bfae0f8e2c34d09e1bbd2654e062202ee1d391f973a4e503e4a5c2160",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)10620_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "Marketplace",
            "label": "saleIdCounter",
            "type": "t_struct(Counter)16409_storage",
            "src": "marketplace/Marketplace.sol:71"
          },
          {
            "contract": "Marketplace",
            "label": "auctionIdCounter",
            "type": "t_struct(Counter)16409_storage",
            "src": "marketplace/Marketplace.sol:72"
          },
          {
            "contract": "Marketplace",
            "label": "bidIdCounter",
            "type": "t_struct(Counter)16409_storage",
            "src": "marketplace/Marketplace.sol:73"
          },
          {
            "contract": "Marketplace",
            "label": "nftContract",
            "type": "t_contract(IIngredientNFT)6334",
            "src": "marketplace/Marketplace.sol:82"
          },
          {
            "contract": "Marketplace",
            "label": "minDuration",
            "type": "t_uint256",
            "src": "marketplace/Marketplace.sol:84"
          },
          {
            "contract": "Marketplace",
            "label": "sale",
            "type": "t_mapping(t_uint256,t_struct(SaleInfo)7414_storage)",
            "src": "marketplace/Marketplace.sol:87"
          },
          {
            "contract": "Marketplace",
            "label": "userSaleIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:90"
          },
          {
            "contract": "Marketplace",
            "label": "auction",
            "type": "t_mapping(t_uint256,t_struct(AuctionInfo)7440_storage)",
            "src": "marketplace/Marketplace.sol:93"
          },
          {
            "contract": "Marketplace",
            "label": "userAuctionIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:96"
          },
          {
            "contract": "Marketplace",
            "label": "bid",
            "type": "t_mapping(t_uint256,t_struct(Bid)7447_storage)",
            "src": "marketplace/Marketplace.sol:99"
          },
          {
            "contract": "Marketplace",
            "label": "userBidIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:102"
          },
          {
            "contract": "Marketplace",
            "label": "supportedTokens",
            "type": "t_mapping(t_address,t_bool)",
            "src": "marketplace/Marketplace.sol:105"
          },
          {
            "contract": "PrivateMarketplace",
            "label": "talien",
            "type": "t_contract(ITalien)6670",
            "src": "marketplace/PrivateMarketplace.sol:14"
          },
          {
            "contract": "PrivateMarketplace",
            "label": "earlyAccessTime",
            "type": "t_uint256",
            "src": "marketplace/PrivateMarketplace.sol:15"
          }
        ],
        "types": {
          "t_contract(ITalien)6670": {
            "label": "contract ITalien"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)16409_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IIngredientNFT)6334": {
            "label": "contract IIngredientNFT"
          },
          "t_mapping(t_uint256,t_struct(SaleInfo)7414_storage)": {
            "label": "mapping(uint256 => struct Marketplace.SaleInfo)"
          },
          "t_struct(SaleInfo)7414_storage": {
            "label": "struct Marketplace.SaleInfo",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "buyer",
                "type": "t_address"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "totalCopies",
                "type": "t_uint256"
              },
              {
                "label": "remainingCopies",
                "type": "t_uint256"
              },
              {
                "label": "sellingPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "saleCreationTime",
                "type": "t_uint256"
              },
              {
                "label": "sellTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(AuctionInfo)7440_storage)": {
            "label": "mapping(uint256 => struct Marketplace.AuctionInfo)"
          },
          "t_struct(AuctionInfo)7440_storage": {
            "label": "struct Marketplace.AuctionInfo",
            "members": [
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "isVipAuction",
                "type": "t_bool"
              },
              {
                "label": "sellerAddress",
                "type": "t_address"
              },
              {
                "label": "initialPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint256"
              },
              {
                "label": "winningBidId",
                "type": "t_uint256"
              },
              {
                "label": "bidIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "buyTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Bid)7447_storage)": {
            "label": "mapping(uint256 => struct Marketplace.Bid)"
          },
          "t_struct(Bid)7447_storage": {
            "label": "struct Marketplace.Bid",
            "members": [
              {
                "label": "auctionId",
                "type": "t_uint256"
              },
              {
                "label": "bidderAddress",
                "type": "t_address"
              },
              {
                "label": "bidAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)10620_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)10620_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "7cfb6cce8376d46dc00f662e3d4a648caa86f6db9239d545444ee8eeb124890a": {
      "address": "0xed6f15eA814c31D3e69235Dfc9D7aa7559200b6C",
      "txHash": "0x81031112f69716316f465410e37e3bdad41fd4245c3f4dd15ce555893c14c0fa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)10620_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "Marketplace",
            "label": "saleIdCounter",
            "type": "t_struct(Counter)16409_storage",
            "src": "marketplace/Marketplace.sol:71"
          },
          {
            "contract": "Marketplace",
            "label": "auctionIdCounter",
            "type": "t_struct(Counter)16409_storage",
            "src": "marketplace/Marketplace.sol:72"
          },
          {
            "contract": "Marketplace",
            "label": "bidIdCounter",
            "type": "t_struct(Counter)16409_storage",
            "src": "marketplace/Marketplace.sol:73"
          },
          {
            "contract": "Marketplace",
            "label": "nftContract",
            "type": "t_contract(IIngredientNFT)6334",
            "src": "marketplace/Marketplace.sol:82"
          },
          {
            "contract": "Marketplace",
            "label": "minDuration",
            "type": "t_uint256",
            "src": "marketplace/Marketplace.sol:84"
          },
          {
            "contract": "Marketplace",
            "label": "sale",
            "type": "t_mapping(t_uint256,t_struct(SaleInfo)7414_storage)",
            "src": "marketplace/Marketplace.sol:87"
          },
          {
            "contract": "Marketplace",
            "label": "userSaleIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:90"
          },
          {
            "contract": "Marketplace",
            "label": "auction",
            "type": "t_mapping(t_uint256,t_struct(AuctionInfo)7440_storage)",
            "src": "marketplace/Marketplace.sol:93"
          },
          {
            "contract": "Marketplace",
            "label": "userAuctionIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:96"
          },
          {
            "contract": "Marketplace",
            "label": "bid",
            "type": "t_mapping(t_uint256,t_struct(Bid)7447_storage)",
            "src": "marketplace/Marketplace.sol:99"
          },
          {
            "contract": "Marketplace",
            "label": "userBidIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/Marketplace.sol:102"
          },
          {
            "contract": "Marketplace",
            "label": "supportedTokens",
            "type": "t_mapping(t_address,t_bool)",
            "src": "marketplace/Marketplace.sol:105"
          }
        ],
        "types": {
          "t_struct(Counter)16409_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)6334": {
            "label": "contract IIngredientNFT"
          },
          "t_mapping(t_uint256,t_struct(SaleInfo)7414_storage)": {
            "label": "mapping(uint256 => struct Marketplace.SaleInfo)"
          },
          "t_struct(SaleInfo)7414_storage": {
            "label": "struct Marketplace.SaleInfo",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "buyer",
                "type": "t_address"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "totalCopies",
                "type": "t_uint256"
              },
              {
                "label": "remainingCopies",
                "type": "t_uint256"
              },
              {
                "label": "sellingPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "saleCreationTime",
                "type": "t_uint256"
              },
              {
                "label": "sellTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(AuctionInfo)7440_storage)": {
            "label": "mapping(uint256 => struct Marketplace.AuctionInfo)"
          },
          "t_struct(AuctionInfo)7440_storage": {
            "label": "struct Marketplace.AuctionInfo",
            "members": [
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "isVipAuction",
                "type": "t_bool"
              },
              {
                "label": "sellerAddress",
                "type": "t_address"
              },
              {
                "label": "initialPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint256"
              },
              {
                "label": "winningBidId",
                "type": "t_uint256"
              },
              {
                "label": "bidIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "buyTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Bid)7447_storage)": {
            "label": "mapping(uint256 => struct Marketplace.Bid)"
          },
          "t_struct(Bid)7447_storage": {
            "label": "struct Marketplace.Bid",
            "members": [
              {
                "label": "auctionId",
                "type": "t_uint256"
              },
              {
                "label": "bidderAddress",
                "type": "t_address"
              },
              {
                "label": "bidAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)10620_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)10620_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "b728ad6387cff7c8b014d30a1a78dd21835b57a1eb98f93e3804172f2d3c5a7e": {
      "address": "0x9D73f41C81A10793861F2588a3BF88961254e327",
      "txHash": "0x25021b8c7415100bb36daf8d78c89cb5d7eb29a5553d517a18798e68fe305ca9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)15628_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:25"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:94"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenCounter",
            "type": "t_struct(Counter)14987_storage",
            "src": "BaseERC1155.sol:50"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenTotalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "BaseERC1155.sol:59"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "BaseERC1155.sol:280"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyReceiver",
            "type": "t_address",
            "src": "BaseERC1155WithRoyalties.sol:31"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyFee",
            "type": "t_uint8",
            "src": "BaseERC1155WithRoyalties.sol:33"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "BaseERC1155WithRoyalties.sol:130"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedAddresses",
            "type": "t_array(t_address)dyn_storage",
            "src": "IngredientsNFT.sol:37"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedFromAddresses",
            "type": "t_array(t_address)dyn_storage",
            "src": "IngredientsNFT.sol:38"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ingredients",
            "type": "t_mapping(t_uint256,t_struct(Ingredient)2129_storage)",
            "src": "IngredientsNFT.sol:41"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ipfsHash",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "IngredientsNFT.sol:44"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defs",
            "type": "t_mapping(t_uint256,t_struct(Defs)2114_storage)",
            "src": "IngredientsNFT.sol:47"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defsCounter",
            "type": "t_struct(Counter)14987_storage",
            "src": "IngredientsNFT.sol:54"
          },
          {
            "contract": "IngredientsNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "IngredientsNFT.sol:443"
          }
        ],
        "types": {
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(Ingredient)2129_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Ingredient)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Ingredient)2129_storage": {
            "label": "struct IngredientsNFT.Ingredient",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "nutritionsHash",
                "type": "t_uint256"
              },
              {
                "label": "defIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "keywords",
                "type": "t_array(t_string_storage)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_struct(Defs)2114_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Defs)"
          },
          "t_struct(Defs)2114_storage": {
            "label": "struct IngredientsNFT.Defs",
            "members": [
              {
                "label": "ingredientId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_struct(Counter)14987_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)15628_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)15628_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)15327_storage"
              }
            ]
          },
          "t_struct(Set)15327_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)10867_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "ab78b9fe3594d6404275c746ea170b44edcd6215357f5b12f4db13e42ca834e0": {
      "address": "0x27b9Bf1B060e62e3153af27f1f3979405F96e077",
      "txHash": "0xc6d592714c2b3ef286077d81ad7134a86899a3cf4a10c03fd339eb08aa561db2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "Kitchen",
            "label": "dishType",
            "type": "t_mapping(t_uint256,t_struct(DishType)3081_storage)",
            "src": "Kitchen.sol:37"
          },
          {
            "contract": "Kitchen",
            "label": "baseIngredient",
            "type": "t_mapping(t_uint256,t_struct(BaseIngredient)3066_storage)",
            "src": "Kitchen.sol:39"
          },
          {
            "contract": "Kitchen",
            "label": "baseVariation",
            "type": "t_mapping(t_uint256,t_struct(BaseVariation)3073_storage)",
            "src": "Kitchen.sol:41"
          },
          {
            "contract": "Kitchen",
            "label": "dishTypeCounter",
            "type": "t_struct(Counter)14987_storage",
            "src": "Kitchen.sol:48"
          },
          {
            "contract": "Kitchen",
            "label": "baseIngredientCounter",
            "type": "t_struct(Counter)14987_storage",
            "src": "Kitchen.sol:49"
          },
          {
            "contract": "Kitchen",
            "label": "baseVariationCounter",
            "type": "t_struct(Counter)14987_storage",
            "src": "Kitchen.sol:50"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(DishType)3081_storage)": {
            "label": "mapping(uint256 => struct Kitchen.DishType)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(DishType)3081_storage": {
            "label": "struct Kitchen.DishType",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseIngredientIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(BaseIngredient)3066_storage)": {
            "label": "mapping(uint256 => struct Kitchen.BaseIngredient)"
          },
          "t_struct(BaseIngredient)3066_storage": {
            "label": "struct Kitchen.BaseIngredient",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "variationIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(BaseVariation)3073_storage)": {
            "label": "mapping(uint256 => struct Kitchen.BaseVariation)"
          },
          "t_struct(BaseVariation)3073_storage": {
            "label": "struct Kitchen.BaseVariation",
            "members": [
              {
                "label": "baseId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_struct(Counter)14987_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)10867_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8323f8bd6df00f83d921efac9422046254f6e784d8d604c2240b5d3a44d0de8d": {
      "address": "0x47E15CA8cA02A1b5a21330113034843De26f53B5",
      "txHash": "0x2a3cee2f7b0cc02ac5f75f5b68ade1a0267435ea5b6b66472ebcc23e73926570",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)15628_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:34"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:42"
          },
          {
            "contract": "BaseERC721",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)14987_storage",
            "src": "BaseERC721.sol:42"
          },
          {
            "contract": "BaseERC721",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "BaseERC721.sol:43"
          },
          {
            "contract": "BaseERC721",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "BaseERC721.sol:200"
          },
          {
            "contract": "DishesNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "DishesNFT.sol:43"
          },
          {
            "contract": "DishesNFT",
            "label": "min",
            "type": "t_uint256",
            "src": "DishesNFT.sol:51"
          },
          {
            "contract": "DishesNFT",
            "label": "max",
            "type": "t_uint256",
            "src": "DishesNFT.sol:52"
          },
          {
            "contract": "DishesNFT",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)4911",
            "src": "DishesNFT.sol:54"
          },
          {
            "contract": "DishesNFT",
            "label": "kitchen",
            "type": "t_contract(IKitchen)5003",
            "src": "DishesNFT.sol:55"
          },
          {
            "contract": "DishesNFT",
            "label": "exceptedAddresses",
            "type": "t_array(t_address)dyn_storage",
            "src": "DishesNFT.sol:57"
          },
          {
            "contract": "DishesNFT",
            "label": "dish",
            "type": "t_mapping(t_uint256,t_struct(Dish)896_storage)",
            "src": "DishesNFT.sol:60"
          },
          {
            "contract": "DishesNFT",
            "label": "dishNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "DishesNFT.sol:62"
          },
          {
            "contract": "DishesNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "DishesNFT.sol:508"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)4911": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IKitchen)5003": {
            "label": "contract IKitchen"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(Dish)896_storage)": {
            "label": "mapping(uint256 => struct DishesNFT.Dish)"
          },
          "t_struct(Dish)896_storage": {
            "label": "struct DishesNFT.Dish",
            "members": [
              {
                "label": "dishOwner",
                "type": "t_address"
              },
              {
                "label": "cooked",
                "type": "t_bool"
              },
              {
                "label": "dishId",
                "type": "t_uint256"
              },
              {
                "label": "totalIngredients",
                "type": "t_uint256"
              },
              {
                "label": "variationIdHash",
                "type": "t_uint256"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseVariationHash",
                "type": "t_uint256"
              },
              {
                "label": "flameType",
                "type": "t_uint256"
              },
              {
                "label": "creationTime",
                "type": "t_uint256"
              },
              {
                "label": "completionTime",
                "type": "t_uint256"
              },
              {
                "label": "multiplier",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_struct(Counter)14987_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)15628_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)15628_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)15327_storage"
              }
            ]
          },
          "t_struct(Set)15327_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)10867_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "652a81062f48e854ba70ae5b8a6876217800b82fb73309ecf938ec3fe891ddf0": {
      "address": "0xCF2277c43d6Cad2F59d51B926f36a860a043A746",
      "txHash": "0xb55f5258cd5ee4c4f87c52a657f14c114e62a7178906fa9ff8cad34e99dda9c7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "Oven",
            "label": "flamesCounter",
            "type": "t_struct(Counter)14987_storage",
            "src": "Oven.sol:41"
          },
          {
            "contract": "Oven",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)4911",
            "src": "Oven.sol:48"
          },
          {
            "contract": "Oven",
            "label": "dishesNft",
            "type": "t_contract(IDishesNFT)4766",
            "src": "Oven.sol:49"
          },
          {
            "contract": "Oven",
            "label": "lacToken",
            "type": "t_contract(IBEP20)4691",
            "src": "Oven.sol:50"
          },
          {
            "contract": "Oven",
            "label": "talien",
            "type": "t_contract(ITalien)5247",
            "src": "Oven.sol:51"
          },
          {
            "contract": "Oven",
            "label": "uncookingFee",
            "type": "t_uint256",
            "src": "Oven.sol:53"
          },
          {
            "contract": "Oven",
            "label": "maxIngredients",
            "type": "t_uint256",
            "src": "Oven.sol:56"
          },
          {
            "contract": "Oven",
            "label": "additionalIngredients",
            "type": "t_uint256",
            "src": "Oven.sol:59"
          },
          {
            "contract": "Oven",
            "label": "uncookedDishIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "Oven.sol:62"
          },
          {
            "contract": "Oven",
            "label": "flames",
            "type": "t_mapping(t_uint256,t_struct(FlameDetail)3537_storage)",
            "src": "Oven.sol:65"
          }
        ],
        "types": {
          "t_struct(Counter)14987_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)4911": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IDishesNFT)4766": {
            "label": "contract IDishesNFT"
          },
          "t_contract(IBEP20)4691": {
            "label": "contract IBEP20"
          },
          "t_contract(ITalien)5247": {
            "label": "contract ITalien"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(FlameDetail)3537_storage)": {
            "label": "mapping(uint256 => struct Oven.FlameDetail)"
          },
          "t_struct(FlameDetail)3537_storage": {
            "label": "struct Oven.FlameDetail",
            "members": [
              {
                "label": "flameType",
                "type": "t_string_storage"
              },
              {
                "label": "preparationDuration",
                "type": "t_uint256"
              },
              {
                "label": "lacCharge",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)10867_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e0041c5185eea0d5367d97dd3d271e563694a6be34238e031b7566b72cf82afd": {
      "address": "0x891155F77182909B293a0E5D09dFA8cB8df9f69a",
      "txHash": "0x0e739b283f7459db170b5be97b2cdfcfa68357330a5272883758540e101d1487",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "BaseMarketplace",
            "label": "saleIdCounter",
            "type": "t_struct(Counter)16818_storage",
            "src": "marketplace/BaseMarketplace.sol:71"
          },
          {
            "contract": "BaseMarketplace",
            "label": "auctionIdCounter",
            "type": "t_struct(Counter)16818_storage",
            "src": "marketplace/BaseMarketplace.sol:72"
          },
          {
            "contract": "BaseMarketplace",
            "label": "bidIdCounter",
            "type": "t_struct(Counter)16818_storage",
            "src": "marketplace/BaseMarketplace.sol:73"
          },
          {
            "contract": "BaseMarketplace",
            "label": "nftContract",
            "type": "t_contract(IIngredientNFT)4911",
            "src": "marketplace/BaseMarketplace.sol:82"
          },
          {
            "contract": "BaseMarketplace",
            "label": "minDuration",
            "type": "t_uint256",
            "src": "marketplace/BaseMarketplace.sol:84"
          },
          {
            "contract": "BaseMarketplace",
            "label": "sale",
            "type": "t_mapping(t_uint256,t_struct(SaleInfo)5816_storage)",
            "src": "marketplace/BaseMarketplace.sol:87"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userSaleIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/BaseMarketplace.sol:90"
          },
          {
            "contract": "BaseMarketplace",
            "label": "auction",
            "type": "t_mapping(t_uint256,t_struct(AuctionInfo)5842_storage)",
            "src": "marketplace/BaseMarketplace.sol:93"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userAuctionIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/BaseMarketplace.sol:96"
          },
          {
            "contract": "BaseMarketplace",
            "label": "bid",
            "type": "t_mapping(t_uint256,t_struct(Bid)5849_storage)",
            "src": "marketplace/BaseMarketplace.sol:99"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userBidIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "marketplace/BaseMarketplace.sol:102"
          },
          {
            "contract": "BaseMarketplace",
            "label": "supportedTokens",
            "type": "t_mapping(t_address,t_bool)",
            "src": "marketplace/BaseMarketplace.sol:105"
          },
          {
            "contract": "PrivateMarketplace",
            "label": "talien",
            "type": "t_contract(ITalien)5247",
            "src": "marketplace/PrivateMarketplace.sol:14"
          },
          {
            "contract": "PrivateMarketplace",
            "label": "earlyAccessTime",
            "type": "t_uint256",
            "src": "marketplace/PrivateMarketplace.sol:15"
          }
        ],
        "types": {
          "t_contract(ITalien)5247": {
            "label": "contract ITalien"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)16818_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IIngredientNFT)4911": {
            "label": "contract IIngredientNFT"
          },
          "t_mapping(t_uint256,t_struct(SaleInfo)5816_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.SaleInfo)"
          },
          "t_struct(SaleInfo)5816_storage": {
            "label": "struct BaseMarketplace.SaleInfo",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "buyer",
                "type": "t_address"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "totalCopies",
                "type": "t_uint256"
              },
              {
                "label": "remainingCopies",
                "type": "t_uint256"
              },
              {
                "label": "sellingPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "saleCreationTime",
                "type": "t_uint256"
              },
              {
                "label": "sellTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(AuctionInfo)5842_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.AuctionInfo)"
          },
          "t_struct(AuctionInfo)5842_storage": {
            "label": "struct BaseMarketplace.AuctionInfo",
            "members": [
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "isVipAuction",
                "type": "t_bool"
              },
              {
                "label": "sellerAddress",
                "type": "t_address"
              },
              {
                "label": "initialPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint256"
              },
              {
                "label": "winningBidId",
                "type": "t_uint256"
              },
              {
                "label": "bidIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "buyTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Bid)5849_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.Bid)"
          },
          "t_struct(Bid)5849_storage": {
            "label": "struct BaseMarketplace.Bid",
            "members": [
              {
                "label": "auctionId",
                "type": "t_uint256"
              },
              {
                "label": "bidderAddress",
                "type": "t_address"
              },
              {
                "label": "bidAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)10867_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)10867_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "656afc9f60b8f5e87f32b6ff04d67f55a454b628236443358b293bf0c73c88f8": {
      "address": "0xF6133eBC4bc97a21FF6EB629Dd5F02eBE1Bf1aF8",
      "txHash": "0xd13d93ed9ed9ad58de9ddf29f1016b0694aa8aefcdfb6bcfa7e72d8ff5040ec1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:25"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:94"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/BaseERC1155.sol:53"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenTotalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/BaseERC1155.sol:62"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/BaseERC1155.sol:287"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyReceiver",
            "type": "t_address",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:31"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyFee",
            "type": "t_uint8",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:33"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:130"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ingredients",
            "type": "t_mapping(t_uint256,t_struct(Ingredient)9565_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:38"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ipfsHash",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:41"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defs",
            "type": "t_mapping(t_uint256,t_struct(Defs)9550_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:44"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:47"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedFromAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:49"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defsCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:56"
          },
          {
            "contract": "IngredientsNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:547"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Ingredient)9565_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Ingredient)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Ingredient)9565_storage": {
            "label": "struct IngredientsNFT.Ingredient",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "nutritionsHash",
                "type": "t_uint256"
              },
              {
                "label": "defIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "keywords",
                "type": "t_array(t_string_storage)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_struct(Defs)9550_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Defs)"
          },
          "t_struct(Defs)9550_storage": {
            "label": "struct IngredientsNFT.Defs",
            "members": [
              {
                "label": "ingredientId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4956_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4655_storage"
              }
            ]
          },
          "t_struct(Set)4655_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "620ff7573143e46bbf07cc41123ec26b2e7befd3bbd840a863f75644c0e50d53": {
      "address": "0xB00786baCdfE3632667dEae7e562e296F82fdfE1",
      "txHash": "0xd5381f3ececeb2aad1e9c531e226947704ad6d89da901b0384e55f29aeefb16c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "Kitchen",
            "label": "totalCoordinates",
            "type": "t_uint256",
            "src": "../project:/contracts/Kitchen.sol:38"
          },
          {
            "contract": "Kitchen",
            "label": "dishType",
            "type": "t_mapping(t_uint256,t_struct(DishType)10840_storage)",
            "src": "../project:/contracts/Kitchen.sol:41"
          },
          {
            "contract": "Kitchen",
            "label": "baseIngredient",
            "type": "t_mapping(t_uint256,t_struct(BaseIngredient)10819_storage)",
            "src": "../project:/contracts/Kitchen.sol:43"
          },
          {
            "contract": "Kitchen",
            "label": "baseVariation",
            "type": "t_mapping(t_uint256,t_struct(BaseVariation)10826_storage)",
            "src": "../project:/contracts/Kitchen.sol:45"
          },
          {
            "contract": "Kitchen",
            "label": "dishTypeCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/Kitchen.sol:54"
          },
          {
            "contract": "Kitchen",
            "label": "baseIngredientCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/Kitchen.sol:55"
          },
          {
            "contract": "Kitchen",
            "label": "baseVariationCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/Kitchen.sol:56"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(DishType)10840_storage)": {
            "label": "mapping(uint256 => struct Kitchen.DishType)"
          },
          "t_struct(DishType)10840_storage": {
            "label": "struct Kitchen.DishType",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseIngredientIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "x",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "y",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(BaseIngredient)10819_storage)": {
            "label": "mapping(uint256 => struct Kitchen.BaseIngredient)"
          },
          "t_struct(BaseIngredient)10819_storage": {
            "label": "struct Kitchen.BaseIngredient",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "variationIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(BaseVariation)10826_storage)": {
            "label": "mapping(uint256 => struct Kitchen.BaseVariation)"
          },
          "t_struct(BaseVariation)10826_storage": {
            "label": "struct Kitchen.BaseVariation",
            "members": [
              {
                "label": "baseId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "38b86ddd8bcf9a8f68778ff7ebeb7a62cdd064fef528e5bae0f6a1726db1178a": {
      "address": "0xff29F048568779b0AF9EEeBC6CFd9653Eb7f354b",
      "txHash": "0x4d61f9b796a024a1824f74901f579db25303c1a49eb18234c2d1942e1dbf37a4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:42"
          },
          {
            "contract": "BaseERC721",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/BaseERC721.sol:49"
          },
          {
            "contract": "BaseERC721",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/BaseERC721.sol:51"
          },
          {
            "contract": "DishesNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "../project:/contracts/DishesNFT.sol:43"
          },
          {
            "contract": "DishesNFT",
            "label": "min",
            "type": "t_int256",
            "src": "../project:/contracts/DishesNFT.sol:51"
          },
          {
            "contract": "DishesNFT",
            "label": "max",
            "type": "t_int256",
            "src": "../project:/contracts/DishesNFT.sol:52"
          },
          {
            "contract": "DishesNFT",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)12040",
            "src": "../project:/contracts/DishesNFT.sol:54"
          },
          {
            "contract": "DishesNFT",
            "label": "kitchen",
            "type": "t_contract(IKitchen)12168",
            "src": "../project:/contracts/DishesNFT.sol:55"
          },
          {
            "contract": "DishesNFT",
            "label": "dish",
            "type": "t_mapping(t_uint256,t_struct(Dish)8400_storage)",
            "src": "../project:/contracts/DishesNFT.sol:58"
          },
          {
            "contract": "DishesNFT",
            "label": "dishNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/DishesNFT.sol:60"
          },
          {
            "contract": "DishesNFT",
            "label": "exceptedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/DishesNFT.sol:62"
          },
          {
            "contract": "DishesNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/DishesNFT.sol:444"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_contract(IIngredientNFT)12040": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IKitchen)12168": {
            "label": "contract IKitchen"
          },
          "t_mapping(t_uint256,t_struct(Dish)8400_storage)": {
            "label": "mapping(uint256 => struct DishesNFT.Dish)"
          },
          "t_struct(Dish)8400_storage": {
            "label": "struct DishesNFT.Dish",
            "members": [
              {
                "label": "cooked",
                "type": "t_bool"
              },
              {
                "label": "dishId",
                "type": "t_uint256"
              },
              {
                "label": "totalIngredients",
                "type": "t_uint256"
              },
              {
                "label": "siHash",
                "type": "t_uint256"
              },
              {
                "label": "variationIndexHash",
                "type": "t_uint256"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseVariationHash",
                "type": "t_uint256"
              },
              {
                "label": "flameType",
                "type": "t_uint256"
              },
              {
                "label": "creationTime",
                "type": "t_uint256"
              },
              {
                "label": "completionTime",
                "type": "t_uint256"
              },
              {
                "label": "multiplier",
                "type": "t_int256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4956_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4655_storage"
              }
            ]
          },
          "t_struct(Set)4655_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "48d4b4b0cf706f0c4268449783946e49d443531ba4e21f4c274f18552089e767": {
      "address": "0xbD9b4DC004092494D875B228bE47F0bAD09Fdcd5",
      "txHash": "0x51c45b76874fe9c4850877d0157c335bfa91e54642d9e0ae7d83814a84a708f0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "Cooker",
            "label": "flamesCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/Cooker.sol:43"
          },
          {
            "contract": "Cooker",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)12040",
            "src": "../project:/contracts/Cooker.sol:50"
          },
          {
            "contract": "Cooker",
            "label": "dishesNft",
            "type": "t_contract(IDishesNFT)11854",
            "src": "../project:/contracts/Cooker.sol:51"
          },
          {
            "contract": "Cooker",
            "label": "lacToken",
            "type": "t_contract(IBEP20)11779",
            "src": "../project:/contracts/Cooker.sol:52"
          },
          {
            "contract": "Cooker",
            "label": "talien",
            "type": "t_contract(ITalien)12222",
            "src": "../project:/contracts/Cooker.sol:53"
          },
          {
            "contract": "Cooker",
            "label": "uncookingFee",
            "type": "t_uint256",
            "src": "../project:/contracts/Cooker.sol:56"
          },
          {
            "contract": "Cooker",
            "label": "maxIngredients",
            "type": "t_uint256",
            "src": "../project:/contracts/Cooker.sol:59"
          },
          {
            "contract": "Cooker",
            "label": "additionalIngredients",
            "type": "t_uint256",
            "src": "../project:/contracts/Cooker.sol:62"
          },
          {
            "contract": "Cooker",
            "label": "flames",
            "type": "t_mapping(t_uint256,t_struct(FlameDetail)7194_storage)",
            "src": "../project:/contracts/Cooker.sol:65"
          },
          {
            "contract": "Cooker",
            "label": "fundReceiver",
            "type": "t_address",
            "src": "../project:/contracts/Cooker.sol:68"
          }
        ],
        "types": {
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)12040": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IDishesNFT)11854": {
            "label": "contract IDishesNFT"
          },
          "t_contract(IBEP20)11779": {
            "label": "contract IBEP20"
          },
          "t_contract(ITalien)12222": {
            "label": "contract ITalien"
          },
          "t_mapping(t_uint256,t_struct(FlameDetail)7194_storage)": {
            "label": "mapping(uint256 => struct Cooker.FlameDetail)"
          },
          "t_struct(FlameDetail)7194_storage": {
            "label": "struct Cooker.FlameDetail",
            "members": [
              {
                "label": "flameType",
                "type": "t_string_storage"
              },
              {
                "label": "preparationDuration",
                "type": "t_uint256"
              },
              {
                "label": "lacCharge",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7477e01fa1e9b8622f78a24ce50d9f870085d53d52424febd271663f95b073a7": {
      "address": "0xCc856E7450EDC95D982E66174A6D7dC2A5e83eAe",
      "txHash": "0xaad636afeac3c5aef861d39682d4a266607e57a9c01530494dc0a40a2ad40f10",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "BaseMarketplace",
            "label": "saleIdCounter",
            "type": "t_struct(Counter)6146_storage",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:72"
          },
          {
            "contract": "BaseMarketplace",
            "label": "auctionIdCounter",
            "type": "t_struct(Counter)6146_storage",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:73"
          },
          {
            "contract": "BaseMarketplace",
            "label": "bidIdCounter",
            "type": "t_struct(Counter)6146_storage",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:74"
          },
          {
            "contract": "BaseMarketplace",
            "label": "nftContract",
            "type": "t_contract(IIngredientNFT)12040",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:83"
          },
          {
            "contract": "BaseMarketplace",
            "label": "minDuration",
            "type": "t_uint256",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:86"
          },
          {
            "contract": "BaseMarketplace",
            "label": "sale",
            "type": "t_mapping(t_uint256,t_struct(SaleInfo)12790_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:89"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userSaleIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:92"
          },
          {
            "contract": "BaseMarketplace",
            "label": "auction",
            "type": "t_mapping(t_uint256,t_struct(AuctionInfo)12816_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:95"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userAuctionIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:98"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userTotalAuctions",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:101"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userTotalSales",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:104"
          },
          {
            "contract": "BaseMarketplace",
            "label": "bid",
            "type": "t_mapping(t_uint256,t_struct(Bid)12823_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:107"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userBidIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:110"
          },
          {
            "contract": "BaseMarketplace",
            "label": "supportedTokens",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:113"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userTotalBids",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:116"
          },
          {
            "contract": "PrivateMarketplace",
            "label": "talien",
            "type": "t_contract(ITalien)12222",
            "src": "../project:/contracts/marketplace/PrivateMarketplace.sol:14"
          },
          {
            "contract": "PrivateMarketplace",
            "label": "earlyAccessTime",
            "type": "t_uint256",
            "src": "../project:/contracts/marketplace/PrivateMarketplace.sol:15"
          },
          {
            "contract": "PrivateMarketplace",
            "label": "fundReceiver",
            "type": "t_address",
            "src": "../project:/contracts/marketplace/PrivateMarketplace.sol:16"
          }
        ],
        "types": {
          "t_contract(ITalien)12222": {
            "label": "contract ITalien"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Counter)6146_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IIngredientNFT)12040": {
            "label": "contract IIngredientNFT"
          },
          "t_mapping(t_uint256,t_struct(SaleInfo)12790_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.SaleInfo)"
          },
          "t_struct(SaleInfo)12790_storage": {
            "label": "struct BaseMarketplace.SaleInfo",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "buyer",
                "type": "t_address"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "totalCopies",
                "type": "t_uint256"
              },
              {
                "label": "remainingCopies",
                "type": "t_uint256"
              },
              {
                "label": "sellingPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "saleCreationTime",
                "type": "t_uint256"
              },
              {
                "label": "sellTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(AuctionInfo)12816_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.AuctionInfo)"
          },
          "t_struct(AuctionInfo)12816_storage": {
            "label": "struct BaseMarketplace.AuctionInfo",
            "members": [
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "isVipAuction",
                "type": "t_bool"
              },
              {
                "label": "sellerAddress",
                "type": "t_address"
              },
              {
                "label": "initialPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint256"
              },
              {
                "label": "winningBidId",
                "type": "t_uint256"
              },
              {
                "label": "bidIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "buyTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Bid)12823_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.Bid)"
          },
          "t_struct(Bid)12823_storage": {
            "label": "struct BaseMarketplace.Bid",
            "members": [
              {
                "label": "auctionId",
                "type": "t_uint256"
              },
              {
                "label": "bidderAddress",
                "type": "t_address"
              },
              {
                "label": "bidAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "e6ceccea93bd88626229b5d7889fffc50beebffe45f32be63afa4ac6a6073ea4": {
      "address": "0x1d1084e47A28FdB6F8ea64c036970aF28067610a",
      "txHash": "0xee9786e97b8d8983c3339d9183415560ce2b59bb0a298b9b2d6c7124aacf711e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "BaseMarketplace",
            "label": "saleIdCounter",
            "type": "t_struct(Counter)6146_storage",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:72"
          },
          {
            "contract": "BaseMarketplace",
            "label": "auctionIdCounter",
            "type": "t_struct(Counter)6146_storage",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:73"
          },
          {
            "contract": "BaseMarketplace",
            "label": "bidIdCounter",
            "type": "t_struct(Counter)6146_storage",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:74"
          },
          {
            "contract": "BaseMarketplace",
            "label": "nftContract",
            "type": "t_contract(IIngredientNFT)12040",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:83"
          },
          {
            "contract": "BaseMarketplace",
            "label": "minDuration",
            "type": "t_uint256",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:86"
          },
          {
            "contract": "BaseMarketplace",
            "label": "sale",
            "type": "t_mapping(t_uint256,t_struct(SaleInfo)12790_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:89"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userSaleIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:92"
          },
          {
            "contract": "BaseMarketplace",
            "label": "auction",
            "type": "t_mapping(t_uint256,t_struct(AuctionInfo)12816_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:95"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userAuctionIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:98"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userTotalAuctions",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:101"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userTotalSales",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:104"
          },
          {
            "contract": "BaseMarketplace",
            "label": "bid",
            "type": "t_mapping(t_uint256,t_struct(Bid)12823_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:107"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userBidIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:110"
          },
          {
            "contract": "BaseMarketplace",
            "label": "supportedTokens",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:113"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userTotalBids",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:116"
          }
        ],
        "types": {
          "t_struct(Counter)6146_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)12040": {
            "label": "contract IIngredientNFT"
          },
          "t_mapping(t_uint256,t_struct(SaleInfo)12790_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.SaleInfo)"
          },
          "t_struct(SaleInfo)12790_storage": {
            "label": "struct BaseMarketplace.SaleInfo",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "buyer",
                "type": "t_address"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "totalCopies",
                "type": "t_uint256"
              },
              {
                "label": "remainingCopies",
                "type": "t_uint256"
              },
              {
                "label": "sellingPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "saleCreationTime",
                "type": "t_uint256"
              },
              {
                "label": "sellTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(AuctionInfo)12816_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.AuctionInfo)"
          },
          "t_struct(AuctionInfo)12816_storage": {
            "label": "struct BaseMarketplace.AuctionInfo",
            "members": [
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "isVipAuction",
                "type": "t_bool"
              },
              {
                "label": "sellerAddress",
                "type": "t_address"
              },
              {
                "label": "initialPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint256"
              },
              {
                "label": "winningBidId",
                "type": "t_uint256"
              },
              {
                "label": "bidIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "buyTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Bid)12823_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.Bid)"
          },
          "t_struct(Bid)12823_storage": {
            "label": "struct BaseMarketplace.Bid",
            "members": [
              {
                "label": "auctionId",
                "type": "t_uint256"
              },
              {
                "label": "bidderAddress",
                "type": "t_address"
              },
              {
                "label": "bidAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "4d0c96c20b26f29f2fbdb17b2585e3243624abae47c6a0589ac7ea5107508d26": {
      "address": "0xcBf8a6933f23247c60a694A4f58EB188A1Cb7fb8",
      "txHash": "0x805bc66fd4b34e6ad2107c71c84f6f2701f376d9e6ac70f751ffb2a2c142b69c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:25"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:94"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/BaseERC1155.sol:53"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenTotalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/BaseERC1155.sol:62"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/BaseERC1155.sol:287"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyReceiver",
            "type": "t_address",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:31"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyFee",
            "type": "t_uint8",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:33"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:130"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ingredients",
            "type": "t_mapping(t_uint256,t_struct(Ingredient)9484_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:38"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ipfsHash",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:41"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defs",
            "type": "t_mapping(t_uint256,t_struct(Defs)9469_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:44"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:47"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedFromAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:49"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defsCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:56"
          },
          {
            "contract": "IngredientsNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:547"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Ingredient)9484_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Ingredient)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Ingredient)9484_storage": {
            "label": "struct IngredientsNFT.Ingredient",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "nutritionsHash",
                "type": "t_uint256"
              },
              {
                "label": "defIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "keywords",
                "type": "t_array(t_string_storage)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_struct(Defs)9469_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Defs)"
          },
          "t_struct(Defs)9469_storage": {
            "label": "struct IngredientsNFT.Defs",
            "members": [
              {
                "label": "ingredientId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4956_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4655_storage"
              }
            ]
          },
          "t_struct(Set)4655_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "19a60b7f5cfd73e7b81c0db89bedb4b4e10b633e3a3d47b7bf54c8a388223376": {
      "address": "0x410bfeA640fF2b3C7397b3c64b6FAC0CBb582CD6",
      "txHash": "0xe5f19e0156278477c5e56a688188745a8b6630aa8d6a3aac072f73519ceed514",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "Kitchen",
            "label": "totalCoordinates",
            "type": "t_uint256",
            "src": "../project:/contracts/Kitchen.sol:38"
          },
          {
            "contract": "Kitchen",
            "label": "dishType",
            "type": "t_mapping(t_uint256,t_struct(DishType)10758_storage)",
            "src": "../project:/contracts/Kitchen.sol:41"
          },
          {
            "contract": "Kitchen",
            "label": "baseIngredient",
            "type": "t_mapping(t_uint256,t_struct(BaseIngredient)10737_storage)",
            "src": "../project:/contracts/Kitchen.sol:43"
          },
          {
            "contract": "Kitchen",
            "label": "baseVariation",
            "type": "t_mapping(t_uint256,t_struct(BaseVariation)10744_storage)",
            "src": "../project:/contracts/Kitchen.sol:45"
          },
          {
            "contract": "Kitchen",
            "label": "dishTypeCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/Kitchen.sol:54"
          },
          {
            "contract": "Kitchen",
            "label": "baseIngredientCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/Kitchen.sol:55"
          },
          {
            "contract": "Kitchen",
            "label": "baseVariationCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/Kitchen.sol:56"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(DishType)10758_storage)": {
            "label": "mapping(uint256 => struct Kitchen.DishType)"
          },
          "t_struct(DishType)10758_storage": {
            "label": "struct Kitchen.DishType",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseIngredientIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "x",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "y",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(BaseIngredient)10737_storage)": {
            "label": "mapping(uint256 => struct Kitchen.BaseIngredient)"
          },
          "t_struct(BaseIngredient)10737_storage": {
            "label": "struct Kitchen.BaseIngredient",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "variationIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(BaseVariation)10744_storage)": {
            "label": "mapping(uint256 => struct Kitchen.BaseVariation)"
          },
          "t_struct(BaseVariation)10744_storage": {
            "label": "struct Kitchen.BaseVariation",
            "members": [
              {
                "label": "baseId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "eaad29575a7f196d634ec8a87c0a7ee3470ee60942d871935b41eaff0783ac5f": {
      "address": "0xba4619131424F33163cD7269D13c1B7E65faD7Cf",
      "txHash": "0x573e8e6d19df5c93ac6be5928cfc491aeadbb420ff7d21baba437af8a0abc64d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:42"
          },
          {
            "contract": "BaseERC721",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/BaseERC721.sol:49"
          },
          {
            "contract": "BaseERC721",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/BaseERC721.sol:51"
          },
          {
            "contract": "DishesNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "../project:/contracts/DishesNFT.sol:42"
          },
          {
            "contract": "DishesNFT",
            "label": "min",
            "type": "t_int256",
            "src": "../project:/contracts/DishesNFT.sol:50"
          },
          {
            "contract": "DishesNFT",
            "label": "max",
            "type": "t_int256",
            "src": "../project:/contracts/DishesNFT.sol:51"
          },
          {
            "contract": "DishesNFT",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)11951",
            "src": "../project:/contracts/DishesNFT.sol:53"
          },
          {
            "contract": "DishesNFT",
            "label": "kitchen",
            "type": "t_contract(IKitchen)12079",
            "src": "../project:/contracts/DishesNFT.sol:54"
          },
          {
            "contract": "DishesNFT",
            "label": "dish",
            "type": "t_mapping(t_uint256,t_struct(Dish)8417_storage)",
            "src": "../project:/contracts/DishesNFT.sol:57"
          },
          {
            "contract": "DishesNFT",
            "label": "dishNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/DishesNFT.sol:59"
          },
          {
            "contract": "DishesNFT",
            "label": "exceptedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/DishesNFT.sol:61"
          },
          {
            "contract": "DishesNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/DishesNFT.sol:421"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_contract(IIngredientNFT)11951": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IKitchen)12079": {
            "label": "contract IKitchen"
          },
          "t_mapping(t_uint256,t_struct(Dish)8417_storage)": {
            "label": "mapping(uint256 => struct DishesNFT.Dish)"
          },
          "t_struct(Dish)8417_storage": {
            "label": "struct DishesNFT.Dish",
            "members": [
              {
                "label": "cooked",
                "type": "t_bool"
              },
              {
                "label": "dishId",
                "type": "t_uint256"
              },
              {
                "label": "totalIngredients",
                "type": "t_uint256"
              },
              {
                "label": "variationIdHash",
                "type": "t_uint256"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseVariationHash",
                "type": "t_uint256"
              },
              {
                "label": "flameType",
                "type": "t_uint256"
              },
              {
                "label": "creationTime",
                "type": "t_uint256"
              },
              {
                "label": "completionTime",
                "type": "t_uint256"
              },
              {
                "label": "multiplier",
                "type": "t_int256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4956_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4655_storage"
              }
            ]
          },
          "t_struct(Set)4655_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "4a3f973cff6eb6833f2922c86e701ebcfc66511e1d135e14c59a2a1d32158168": {
      "address": "0xcb38A18e1f4D6A25A50ec9a56592f3C886b4a782",
      "txHash": "0x531ccc52493c0860587b961a82bb348bd0e67e0b0766d841acd6ca3b1b4e0418",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:26"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "Cooker",
            "label": "flamesCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/Cooker.sol:43"
          },
          {
            "contract": "Cooker",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)11951",
            "src": "../project:/contracts/Cooker.sol:50"
          },
          {
            "contract": "Cooker",
            "label": "dishesNft",
            "type": "t_contract(IDishesNFT)11767",
            "src": "../project:/contracts/Cooker.sol:51"
          },
          {
            "contract": "Cooker",
            "label": "lacToken",
            "type": "t_contract(IBEP20)11694",
            "src": "../project:/contracts/Cooker.sol:52"
          },
          {
            "contract": "Cooker",
            "label": "talien",
            "type": "t_contract(ITalien)12133",
            "src": "../project:/contracts/Cooker.sol:53"
          },
          {
            "contract": "Cooker",
            "label": "uncookingFee",
            "type": "t_uint256",
            "src": "../project:/contracts/Cooker.sol:56"
          },
          {
            "contract": "Cooker",
            "label": "maxIngredients",
            "type": "t_uint256",
            "src": "../project:/contracts/Cooker.sol:59"
          },
          {
            "contract": "Cooker",
            "label": "additionalIngredients",
            "type": "t_uint256",
            "src": "../project:/contracts/Cooker.sol:62"
          },
          {
            "contract": "Cooker",
            "label": "flames",
            "type": "t_mapping(t_uint256,t_struct(FlameDetail)7194_storage)",
            "src": "../project:/contracts/Cooker.sol:65"
          },
          {
            "contract": "Cooker",
            "label": "fundReceiver",
            "type": "t_address",
            "src": "../project:/contracts/Cooker.sol:68"
          }
        ],
        "types": {
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)11951": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IDishesNFT)11767": {
            "label": "contract IDishesNFT"
          },
          "t_contract(IBEP20)11694": {
            "label": "contract IBEP20"
          },
          "t_contract(ITalien)12133": {
            "label": "contract ITalien"
          },
          "t_mapping(t_uint256,t_struct(FlameDetail)7194_storage)": {
            "label": "mapping(uint256 => struct Cooker.FlameDetail)"
          },
          "t_struct(FlameDetail)7194_storage": {
            "label": "struct Cooker.FlameDetail",
            "members": [
              {
                "label": "flameType",
                "type": "t_string_storage"
              },
              {
                "label": "preparationDuration",
                "type": "t_uint256"
              },
              {
                "label": "lacCharge",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a06090efeeb9fc07c8cd6c8530cba7fb117a24eb368d4587c1cabfb53ab48508": {
      "address": "0x70E35d5A6368FB8E73261Dde184b869F184d37b3",
      "txHash": "0x6d11869d7a0f65793f814c86782a7bce5fdb7c8bb71001fbb11328f4cec76361",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:25"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:94"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/BaseERC1155.sol:53"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenTotalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/BaseERC1155.sol:62"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/BaseERC1155.sol:287"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyReceiver",
            "type": "t_address",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:31"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyFee",
            "type": "t_uint8",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:33"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:130"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ingredients",
            "type": "t_mapping(t_uint256,t_struct(Ingredient)9556_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:38"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ipfsHash",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:41"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defs",
            "type": "t_mapping(t_uint256,t_struct(Defs)9541_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:44"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:47"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedFromAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:49"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defsCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:56"
          },
          {
            "contract": "IngredientsNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:547"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Ingredient)9556_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Ingredient)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Ingredient)9556_storage": {
            "label": "struct IngredientsNFT.Ingredient",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "nutritionsHash",
                "type": "t_uint256"
              },
              {
                "label": "defIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "keywords",
                "type": "t_array(t_string_storage)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_struct(Defs)9541_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Defs)"
          },
          "t_struct(Defs)9541_storage": {
            "label": "struct IngredientsNFT.Defs",
            "members": [
              {
                "label": "ingredientId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4956_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4655_storage"
              }
            ]
          },
          "t_struct(Set)4655_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "55ff700f7165f0c78b6e7fe7f70156a77087ee51b3b054529da44e242e05d61f": {
      "address": "0xBa79788ECECBbfC9380136a0339cA88494294CdF",
      "txHash": "0x035bc65a35b7aa2d03c016b48a7bfc25f7d226c0c6086f70b2cfb97aff96ef3d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:25"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:94"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/BaseERC1155.sol:53"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenTotalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/BaseERC1155.sol:62"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/BaseERC1155.sol:287"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyReceiver",
            "type": "t_address",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:31"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyFee",
            "type": "t_uint8",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:33"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:130"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ingredients",
            "type": "t_mapping(t_uint256,t_struct(Ingredient)9574_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:38"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ipfsHash",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:41"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defs",
            "type": "t_mapping(t_uint256,t_struct(Defs)9559_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:44"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:47"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedFromAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:49"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defsCounter",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:56"
          },
          {
            "contract": "IngredientsNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:555"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Ingredient)9574_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Ingredient)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Ingredient)9574_storage": {
            "label": "struct IngredientsNFT.Ingredient",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "nutritionsHash",
                "type": "t_uint256"
              },
              {
                "label": "defIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "keywords",
                "type": "t_array(t_string_storage)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_struct(Defs)9559_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Defs)"
          },
          "t_struct(Defs)9559_storage": {
            "label": "struct IngredientsNFT.Defs",
            "members": [
              {
                "label": "ingredientId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4956_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4655_storage"
              }
            ]
          },
          "t_struct(Set)4655_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "b353b1b1490103e7b51e7be3688606e05bd864adb755cf52553aae512e53a293": {
      "address": "0xC5B31d7F2CaA05C50fbE0B07b35faaA6dFFa3302",
      "txHash": "0xf88e2d49cdc9f54cbc0b501e18c588aaabd3e632a7807589e79dca7c1badeaac",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:42"
          },
          {
            "contract": "BaseERC721",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/BaseERC721.sol:49"
          },
          {
            "contract": "BaseERC721",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/BaseERC721.sol:51"
          },
          {
            "contract": "DishesNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "../project:/contracts/DishesNFT.sol:43"
          },
          {
            "contract": "DishesNFT",
            "label": "min",
            "type": "t_int256",
            "src": "../project:/contracts/DishesNFT.sol:51"
          },
          {
            "contract": "DishesNFT",
            "label": "max",
            "type": "t_int256",
            "src": "../project:/contracts/DishesNFT.sol:52"
          },
          {
            "contract": "DishesNFT",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)12074",
            "src": "../project:/contracts/DishesNFT.sol:54"
          },
          {
            "contract": "DishesNFT",
            "label": "kitchen",
            "type": "t_contract(IKitchen)12202",
            "src": "../project:/contracts/DishesNFT.sol:55"
          },
          {
            "contract": "DishesNFT",
            "label": "dish",
            "type": "t_mapping(t_uint256,t_struct(Dish)8419_storage)",
            "src": "../project:/contracts/DishesNFT.sol:58"
          },
          {
            "contract": "DishesNFT",
            "label": "dishNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/DishesNFT.sol:60"
          },
          {
            "contract": "DishesNFT",
            "label": "exceptedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/DishesNFT.sol:62"
          },
          {
            "contract": "DishesNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/DishesNFT.sol:449"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_contract(IIngredientNFT)12074": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IKitchen)12202": {
            "label": "contract IKitchen"
          },
          "t_mapping(t_uint256,t_struct(Dish)8419_storage)": {
            "label": "mapping(uint256 => struct DishesNFT.Dish)"
          },
          "t_struct(Dish)8419_storage": {
            "label": "struct DishesNFT.Dish",
            "members": [
              {
                "label": "cooked",
                "type": "t_bool"
              },
              {
                "label": "dishId",
                "type": "t_uint256"
              },
              {
                "label": "totalIngredients",
                "type": "t_uint256"
              },
              {
                "label": "variationIdHash",
                "type": "t_uint256"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseVariationHash",
                "type": "t_uint256"
              },
              {
                "label": "flameType",
                "type": "t_uint256"
              },
              {
                "label": "creationTime",
                "type": "t_uint256"
              },
              {
                "label": "completionTime",
                "type": "t_uint256"
              },
              {
                "label": "multiplier",
                "type": "t_int256"
              },
              {
                "label": "variationIndexHash",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4956_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4655_storage"
              }
            ]
          },
          "t_struct(Set)4655_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "099c08d5a2cf02377944da0438e0ca5722e5a663f9ff2af9b36b0b27d59769a6": {
      "address": "0x3DD40f5E0F3657294Ade601c99a4C150FBefEEa6",
      "txHash": "0x1ffa7b926fc7aa94c04e9d864211b2147c5b25ad6e6d8752cac44c008363d86f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:42"
          },
          {
            "contract": "BaseERC721",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)4315_storage",
            "src": "../project:/contracts/BaseERC721.sol:49"
          },
          {
            "contract": "BaseERC721",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/BaseERC721.sol:51"
          },
          {
            "contract": "DishesNFT",
            "label": "nonce",
            "type": "t_uint256",
            "src": "../project:/contracts/DishesNFT.sol:42"
          },
          {
            "contract": "DishesNFT",
            "label": "min",
            "type": "t_int256",
            "src": "../project:/contracts/DishesNFT.sol:50"
          },
          {
            "contract": "DishesNFT",
            "label": "max",
            "type": "t_int256",
            "src": "../project:/contracts/DishesNFT.sol:51"
          },
          {
            "contract": "DishesNFT",
            "label": "ingredientNft",
            "type": "t_contract(IIngredientNFT)12065",
            "src": "../project:/contracts/DishesNFT.sol:53"
          },
          {
            "contract": "DishesNFT",
            "label": "kitchen",
            "type": "t_contract(IKitchen)12193",
            "src": "../project:/contracts/DishesNFT.sol:54"
          },
          {
            "contract": "DishesNFT",
            "label": "dish",
            "type": "t_mapping(t_uint256,t_struct(Dish)8417_storage)",
            "src": "../project:/contracts/DishesNFT.sol:57"
          },
          {
            "contract": "DishesNFT",
            "label": "dishNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/DishesNFT.sol:59"
          },
          {
            "contract": "DishesNFT",
            "label": "exceptedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/DishesNFT.sol:61"
          },
          {
            "contract": "DishesNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/DishesNFT.sol:436"
          },
          {
            "contract": "DishesNFT",
            "label": "variationIndexHashes",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/DishesNFT.sol:437"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_contract(IIngredientNFT)12065": {
            "label": "contract IIngredientNFT"
          },
          "t_contract(IKitchen)12193": {
            "label": "contract IKitchen"
          },
          "t_mapping(t_uint256,t_struct(Dish)8417_storage)": {
            "label": "mapping(uint256 => struct DishesNFT.Dish)"
          },
          "t_struct(Dish)8417_storage": {
            "label": "struct DishesNFT.Dish",
            "members": [
              {
                "label": "cooked",
                "type": "t_bool"
              },
              {
                "label": "dishId",
                "type": "t_uint256"
              },
              {
                "label": "totalIngredients",
                "type": "t_uint256"
              },
              {
                "label": "variationIdHash",
                "type": "t_uint256"
              },
              {
                "label": "totalBaseIngredients",
                "type": "t_uint256"
              },
              {
                "label": "baseVariationHash",
                "type": "t_uint256"
              },
              {
                "label": "flameType",
                "type": "t_uint256"
              },
              {
                "label": "creationTime",
                "type": "t_uint256"
              },
              {
                "label": "completionTime",
                "type": "t_uint256"
              },
              {
                "label": "multiplier",
                "type": "t_int256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)4315_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4956_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4956_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4655_storage"
              }
            ]
          },
          "t_struct(Set)4655_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "ba89fc3c7eb3c2bf079426f23e4f1ca843bb052dc245f0a14c0a83e0818e4e45": {
      "address": "0xC58481F1D3364CCA116E9Ef52d5223c5DBBF58DF",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:31"
          },
          {
            "contract": "BaseMarketplace",
            "label": "saleIdCounter",
            "type": "t_struct(Counter)6100_storage",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:72"
          },
          {
            "contract": "BaseMarketplace",
            "label": "auctionIdCounter",
            "type": "t_struct(Counter)6100_storage",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:73"
          },
          {
            "contract": "BaseMarketplace",
            "label": "bidIdCounter",
            "type": "t_struct(Counter)6100_storage",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:74"
          },
          {
            "contract": "BaseMarketplace",
            "label": "nftContract",
            "type": "t_contract(IIngredientNFT)12487",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:83"
          },
          {
            "contract": "BaseMarketplace",
            "label": "minDuration",
            "type": "t_uint256",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:86"
          },
          {
            "contract": "BaseMarketplace",
            "label": "sale",
            "type": "t_mapping(t_uint256,t_struct(SaleInfo)13241_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:89"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userSaleIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:92"
          },
          {
            "contract": "BaseMarketplace",
            "label": "auction",
            "type": "t_mapping(t_uint256,t_struct(AuctionInfo)13267_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:95"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userAuctionIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:98"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userTotalAuctions",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:101"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userTotalSales",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:104"
          },
          {
            "contract": "BaseMarketplace",
            "label": "bid",
            "type": "t_mapping(t_uint256,t_struct(Bid)13274_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:107"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userBidIds",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:110"
          },
          {
            "contract": "BaseMarketplace",
            "label": "supportedTokens",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:113"
          },
          {
            "contract": "BaseMarketplace",
            "label": "userTotalBids",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/marketplace/BaseMarketplace.sol:116"
          }
        ],
        "types": {
          "t_struct(Counter)6100_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IIngredientNFT)12487": {
            "label": "contract IIngredientNFT"
          },
          "t_mapping(t_uint256,t_struct(SaleInfo)13241_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.SaleInfo)"
          },
          "t_struct(SaleInfo)13241_storage": {
            "label": "struct BaseMarketplace.SaleInfo",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "buyer",
                "type": "t_address"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "totalCopies",
                "type": "t_uint256"
              },
              {
                "label": "remainingCopies",
                "type": "t_uint256"
              },
              {
                "label": "sellingPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "saleCreationTime",
                "type": "t_uint256"
              },
              {
                "label": "sellTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(AuctionInfo)13267_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.AuctionInfo)"
          },
          "t_struct(AuctionInfo)13267_storage": {
            "label": "struct BaseMarketplace.AuctionInfo",
            "members": [
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "isVipAuction",
                "type": "t_bool"
              },
              {
                "label": "sellerAddress",
                "type": "t_address"
              },
              {
                "label": "initialPrice",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "status",
                "type": "t_uint256"
              },
              {
                "label": "winningBidId",
                "type": "t_uint256"
              },
              {
                "label": "bidIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "cancelTimeStamp",
                "type": "t_uint256"
              },
              {
                "label": "buyTimestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(Bid)13274_storage)": {
            "label": "mapping(uint256 => struct BaseMarketplace.Bid)"
          },
          "t_struct(Bid)13274_storage": {
            "label": "struct BaseMarketplace.Bid",
            "members": [
              {
                "label": "auctionId",
                "type": "t_uint256"
              },
              {
                "label": "bidderAddress",
                "type": "t_address"
              },
              {
                "label": "bidAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "8a99f9983c5ebd5a42ce9764b2d62d41e3ddf79f642806276baa94760b3a8137": {
      "address": "0x8E11Fc08FeDC7493870dEC8F189294d70358Bb08",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4867_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:475"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:23"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:70"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenCounter",
            "type": "t_struct(Counter)4228_storage",
            "src": "../project:/contracts/BaseERC1155.sol:53"
          },
          {
            "contract": "BaseERC1155",
            "label": "tokenTotalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/BaseERC1155.sol:62"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/BaseERC1155.sol:287"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyReceiver",
            "type": "t_address",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:31"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "royaltyFee",
            "type": "t_uint8",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:33"
          },
          {
            "contract": "BaseERC1155WithRoyalties",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/BaseERC1155WithRoyalties.sol:130"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ingredients",
            "type": "t_mapping(t_uint256,t_struct(Ingredient)9982_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:38"
          },
          {
            "contract": "IngredientsNFT",
            "label": "ipfsHash",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:41"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defs",
            "type": "t_mapping(t_uint256,t_struct(Defs)9967_storage)",
            "src": "../project:/contracts/IngredientsNFT.sol:44"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:47"
          },
          {
            "contract": "IngredientsNFT",
            "label": "exceptedFromAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/IngredientsNFT.sol:49"
          },
          {
            "contract": "IngredientsNFT",
            "label": "defsCounter",
            "type": "t_struct(Counter)4228_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:56"
          },
          {
            "contract": "IngredientsNFT",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/IngredientsNFT.sol:556"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Ingredient)9982_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Ingredient)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Ingredient)9982_storage": {
            "label": "struct IngredientsNFT.Ingredient",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "totalVariations",
                "type": "t_uint256"
              },
              {
                "label": "nutritionsHash",
                "type": "t_uint256"
              },
              {
                "label": "defIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "keywords",
                "type": "t_array(t_string_storage)dyn_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_struct(Defs)9967_storage)": {
            "label": "mapping(uint256 => struct IngredientsNFT.Defs)"
          },
          "t_struct(Defs)9967_storage": {
            "label": "struct IngredientsNFT.Defs",
            "members": [
              {
                "label": "ingredientId",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "svg",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(Counter)4228_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4867_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4867_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4566_storage"
              }
            ]
          },
          "t_struct(Set)4566_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    }
  }
}
